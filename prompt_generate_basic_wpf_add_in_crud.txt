Add in the ability to save, read, update and delete to the wpf application
To add CRUD (Create, Read, Update, Delete) functionality into your WPF application, you'll need to adjust your UI, add methods to interact with your IPostService, and connect these actions to your UI elements. Here's how you can extend your application:

Step 1: Update MainWindow.xaml
First, modify your MainWindow.xaml to include UI elements for CRUD operations:

xml
<Window x:Class="MyWpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Blog Post Manager" Height="600" Width="800">
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ListView x:Name="lstPosts" Grid.Column="0" Grid.Row="1" Margin="0,5,0,5">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding Id}" Width="50"/>
                    <GridViewColumn Header="Title" DisplayMemberBinding="{Binding Title}" Width="200"/>
                    <GridViewColumn Header="Content" DisplayMemberBinding="{Binding Content}" Width="250"/>
                </GridView>
            </ListView.View>
        </ListView>

        <Button Grid.Column="1" Grid.Row="0" Content="New Post" Click="NewPost_Click" Margin="0,0,0,5"/>
        <Button Grid.Column="1" Grid.Row="1" Content="Edit Post" Click="EditPost_Click" Margin="0,0,0,5"/>
        <Button Grid.Column="1" Grid.Row="2" Content="Delete Post" Click="DeletePost_Click" Margin="0,0,0,5"/>
        <Button Grid.Column="0" Grid.Row="4" Content="Refresh Posts" Click="RefreshPosts_Click" Margin="5,5,0,0"/>
    </Grid>
</Window>

Step 2: Modify MainWindow.xaml.cs
Now, update your code-behind to handle these operations:

csharp
using System.Windows;
using System.Collections.ObjectModel;
using YourNamespace.Services;

namespace MyWpfApp
{
    public partial class MainWindow : Window
    {
        private readonly IPostService _postService;
        private ObservableCollection<Post> _posts;

        public MainWindow(IPostService postService)
        {
            InitializeComponent();
            _postService = postService;
            _posts = new ObservableCollection<Post>();
            lstPosts.ItemsSource = _posts;
            RefreshPosts();
        }

        private async void RefreshPosts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPosts();
        }

        private async void RefreshPosts()
        {
            var posts = await _postService.GetAllPostsAsync();
            _posts.Clear();
            foreach (var post in posts)
            {
                _posts.Add(post);
            }
        }

        private void NewPost_Click(object sender, RoutedEventArgs e)
        {
            var editor = new BlogPostEditor(_postService);
            editor.Closed += (sender, args) => RefreshPosts();
            editor.ShowDialog();
        }

        private async void EditPost_Click(object sender, RoutedEventArgs e)
        {
            if (lstPosts.SelectedItem is Post selectedPost)
            {
                var editor = new BlogPostEditor(_postService, selectedPost);
                editor.Closed += (sender, args) => RefreshPosts();
                editor.ShowDialog();
            }
            else
            {
                MessageBox.Show("Please select a post to edit.", "Edit Post", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private async void DeletePost_Click(object sender, RoutedEventArgs e)
        {
            if (lstPosts.SelectedItem is Post selectedPost)
            {
                if (MessageBox.Show("Are you sure you want to delete this post?", "Confirm Delete", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
                {
                    await _postService.DeletePostAsync(selectedPost.Id);
                    RefreshPosts();
                }
            }
            else
            {
                MessageBox.Show("Please select a post to delete.", "Delete Post", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}

Step 3: Update BlogPostEditor.xaml.cs
Modify the BlogPostEditor to handle both creating and updating posts:

csharp
using System.Windows;
using YourNamespace.Services;

namespace MyWpfApp
{
    public partial class BlogPostEditor : Window
    {
        private readonly IPostService _postService;
        private Post _post;

        public BlogPostEditor(IPostService postService, Post post = null)
        {
            InitializeComponent();
            _postService = postService;
            if (post != null)
            {
                _post = post;
                txtTitle.Text = post.Title;
                txtContent.Text = post.Content;
            }
        }

        private async void SavePost_Click(object sender, RoutedEventArgs e)
        {
            if (_post == null)
            {
                // Create new post
                var newPost = new Post
                {
                    Title = txtTitle.Text,
                    Content = txtContent.Text,
                    CreatedAt = DateTime.UtcNow
                };
                await _postService.AddPostAsync(newPost);
            }
            else
            {
                // Update existing post
                _post.Title = txtTitle.Text;
                _post.Content = txtContent.Text;
                _post.UpdatedAt = DateTime.UtcNow;
                await _postService.UpdatePostAsync(_post);
            }
            MessageBox.Show("Post saved successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            this.Close();
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}

Step 4: Ensure Service Injection
Make sure your IPostService is correctly injected either through the constructor in your App.xaml.cs or directly in MainWindow if you're not using App.xaml.cs for DI setup.

This setup provides basic CRUD operations for managing blog posts in your WPF application. Always ensure that your service layer (IPostService and its implementation) correctly handles database operations, and consider adding more robust error handling, validation, and possibly UI feedback for operations like successful saves or deletions.
